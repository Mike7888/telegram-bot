import os
import re
import logging
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    CallbackContext,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs("data", exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    MAIN_MENU,
    SURVEY_NAME,
    SURVEY_EMAIL,
    SURVEY_PHONE,
    MAIN_PROGRAM_NOW,
    CURRENT_LEVEL,
    CURRENT_TRAINER,
    STUDIED_BEFORE,
    STUDIED_LEVELS,
    DESIRED_TRAINER,
    PLAN_STUDY,
    PLANNED_LEVEL,
    PLANNED_TRAINER,
    SPECIALIZATIONS_NOW,
    SPEC_LIST_NOW,
    SPEC_TRAINER_NOW,
    SPECIALIZATIONS_BEFORE,
    SPEC_LIST_BEFORE,
    SPEC_TRAINER_BEFORE,
    EVENTS,
    EVENTS_OTHER,
    FEEDBACK,
    REVIEW_COURSE,
    REVIEW_TRAINER,
    REVIEW_RATING,
    REVIEW_RESULTS,
    PRIVACY_POLICY,
    NOTIFICATION_CONSENT,
    REVIEW_PUBLICATION_CONSENT,
) = range(29) 

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
BLOCKS = {
    "spec_trainer_now": "13. –ö—Ç–æ –í–∞—à —Ç—Ä–µ–Ω–µ—Ä?",
    "events": "üîπ –ë–ª–æ–∫ 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n15. –í –∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö —Ü–µ–Ω—Ç—Ä–∞ –í—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏?",
    "spec_list_before": "16. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é(–∏), –∫–æ—Ç–æ—Ä—ã–µ –í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏:\n(–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä')",
    "spec_trainer_before": "17. –ö—Ç–æ –±—ã–ª –í–∞—à —Ç—Ä–µ–Ω–µ—Ä?",
    "events_other": "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –í—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏:",
    "feedback": "üîπ –ë–ª–æ–∫ 5. –ü–æ–∂–µ–ª–∞–Ω–∏—è\n\n18. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
    "next_event": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª'"
}

RESPONSES = {
    "survey_success": "‚úÖ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!",
    "survey_error": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø—Ä–æ—Å! –í–æ–∑–Ω–∏–∫–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.",
    "cancel": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",  # <- –ó–¥–µ—Å—å –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è!
    "privacy_policy_required": "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
    "notification_consent_info": "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –Ω–∞—à —Ü–µ–Ω—Ç—Ä.",
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        ["–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"],
        ["–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Ü–µ–Ω—Ç—Ä–∞"],
        ["–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –¶–µ–Ω—Ç—Ä–µ"],
        ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¶–µ–Ω—Ç—Ä–∞"],
        ["–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

yes_no_keyboard = ReplyKeyboardMarkup(
    [["–î–∞", "–ù–µ—Ç"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

levels_keyboard = ReplyKeyboardMarkup(
    [["1 —Å—Ç—É–ø–µ–Ω—å"], ["2 —Å—Ç—É–ø–µ–Ω—å"], ["3 —Å—Ç—É–ø–µ–Ω—å"], ["–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

spec_keyboard = ReplyKeyboardMarkup(
    [
        ["–ì–µ—à—Ç–∞–ª—å—Ç-–ø–æ–¥—Ö–æ–¥ –≤ —Ç–µ—Ä–∞–ø–∏–∏ –ø—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤"],
        ["–°–µ–º–µ–π–Ω–∞—è –≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è"],
        ["–ì–µ—à—Ç–∞–ª—å—Ç-–ø–æ–¥—Ö–æ–¥ –≤ —Å–µ–∫—Å–æ–ª–æ–≥–∏–∏"],
        ["–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è —Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"],
        ["–ê—Ä—Ç-–≥–µ—à—Ç–∞–ª—å—Ç: —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è"],
        ["–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è –≤ —Ä–∞–±–æ—Ç–µ —Å –¥–µ—Ç—å–º–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º–∏"],
        ["–ì—Ä—É–ø–ø–æ–≤–∞—è –≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è"],
        ["–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è –≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ"],
        ["–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

events_keyboard = ReplyKeyboardMarkup(
    [
        ["–õ–µ—Ç–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"],
        ["–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π"],
        ["–î—Ä—É–≥–æ–µ"],
        ["–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

rating_keyboard = ReplyKeyboardMarkup(
    [[str(i) for i in range(1, 6)], [str(i) for i in range(6, 11)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def sanitize_filename(name):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r'[\\/*?:"<>|]', "", name).strip()

def save_to_excel(data, filename="data/SurveyResults.xlsx"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        prepared_data = {}
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ data
        for key, value in data.items():
            if isinstance(value, list):
                prepared_data[key] = ", ".join(value)
            else:
                prepared_data[key] = value
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        prepared_data["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        df = pd.DataFrame([prepared_data])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(filename):
            try:
                existing_df = pd.read_excel(filename)
                updated_df = pd.concat([existing_df, df], ignore_index=True)
            except Exception as e:
                logger.error(f"Error reading existing Excel file: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                updated_df = df
        else:
            updated_df = df
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        updated_df.to_excel(filename, index=False)
        logger.info(f"Data successfully saved to {filename}")
        return True
    except Exception as e:
        logger.error(f"Error saving to Excel: {e}")
        return False

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_data[user.id] = {
        "telegram_id": user.id, 
        "username": user.username,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–µ–Ω—Ç—Ä –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ '–§–µ–Ω–æ–º–µ–Ω—ã'! "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard
    )
    return MAIN_MENU

async def main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    user = update.message.from_user
    choice = update.message.text
    
    if choice == "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å":
        await update.message.reply_text(
            "üîπ –ë–ª–æ–∫ 1. –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n\n1. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?\n"
            "(–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)",
            reply_markup=ReplyKeyboardRemove()
        )
        return SURVEY_NAME
    
    elif choice == "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await update.message.reply_text(
            "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ü–µ–Ω—Ç—Ä–∞:\nhttps://phenomeny.by/intensiv_2025",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU
    
    elif choice == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "–û–û–û '–¶–µ–Ω—Ç—Ä –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ '–§–µ–Ω–æ–º–µ–Ω—ã'\n"
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: 220114, –≥. –ú–∏–Ω—Å–∫, —É–ª. –ú–∞–∫–∞–µ–Ω–∫–∞, 12–µ, –ø–æ–º. 298.\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +375291292429",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU
    
    elif choice == "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Ü–µ–Ω—Ç—Ä–∞":
        await update.message.reply_text(
            "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Ü–µ–Ω—Ç—Ä–∞:\nhttps://phenomeny.by/payment",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU
    
    elif choice == "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –¶–µ–Ω—Ç—Ä–µ":
        await update.message.reply_text(
            "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è:\nhttps://phenomeny.by/education",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU
    
    elif choice == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¶–µ–Ω—Ç—Ä–∞":
        await update.message.reply_text(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\nhttps://phenomeny.by/specializations",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU
    
    elif choice == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!\n\n"
            "1. –ö–∞–∫–æ–π –∫—É—Ä—Å –≤—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∏ –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –µ–≥–æ?",
            reply_markup=ReplyKeyboardRemove()
        )
        return REVIEW_COURSE
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard
        )
        return MAIN_MENU

async def survey_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_data[user.id]["name"] = update.message.text
    
    await update.message.reply_text(
        "2. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à email:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SURVEY_EMAIL

async def survey_email(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_data[user.id]["email"] = update.message.text
    
    await update.message.reply_text(
        "3. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SURVEY_PHONE

async def survey_phone(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_data[user.id]["phone"] = update.message.text
    
    await update.message.reply_text(
        "üîπ –ë–ª–æ–∫ 2. –û–±—É—á–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n"
        "4. –í—ã —Å–µ–π—á–∞—Å –æ–±—É—á–∞–µ—Ç–µ—Å—å —É –Ω–∞—Å –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (1‚Äì3 —Å—Ç—É–ø–µ–Ω—å)?",
        reply_markup=yes_no_keyboard
    )
    return MAIN_PROGRAM_NOW

async def main_program_now(update: Update, context: CallbackContext) -> int:
    """–û–±—É—á–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    user = update.message.from_user
    answer = update.message.text.lower()
    user_data[user.id]["main_program_now"] = answer
    
    if answer == "–¥–∞":
        await update.message.reply_text(
            "5. –ù–∞ –∫–∞–∫–æ–π —Å—Ç—É–ø–µ–Ω–∏ –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å?\n"
            "(–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–ø–µ–Ω–µ–π, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä')",
            reply_markup=levels_keyboard
        )
        return CURRENT_LEVEL
    else:
        await update.message.reply_text(
            "6. –†–∞–Ω–µ–µ –í—ã –æ–±—É—á–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ?",
            reply_markup=yes_no_keyboard
        )
        return STUDIED_BEFORE

async def current_level(update: Update, context: CallbackContext) -> int:
    """–¢–µ–∫—É—â–∞—è —Å—Ç—É–ø–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è"""
    user = update.message.from_user
    text = update.message.text
    
    if "current_level" not in user_data[user.id]:
        user_data[user.id]["current_level"] = []
    
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        if not user_data[user.id]["current_level"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—É–ø–µ–Ω—å.",
                reply_markup=levels_keyboard
            )
            return CURRENT_LEVEL
        
        await update.message.reply_text(
            "6. –ö—Ç–æ –í–∞—à —Ç—Ä–µ–Ω–µ—Ä?",
            reply_markup=ReplyKeyboardRemove()
        )
        return CURRENT_TRAINER
    else:
        if text not in user_data[user.id]["current_level"]:
            user_data[user.id]["current_level"].append(text)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—É–ø–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
            reply_markup=levels_keyboard
        )
        return CURRENT_LEVEL

async def current_trainer(update: Update, context: CallbackContext) -> int:
    """–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–µ—Ä"""
    user = update.message.from_user
    user_data[user.id]["current_trainer"] = update.message.text
    
    await update.message.reply_text(
        "üîπ –ë–ª–æ–∫ 3. –û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º\n\n"
        "11. –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º?",
        reply_markup=yes_no_keyboard
    )
    return SPECIALIZATIONS_NOW

async def studied_before(update: Update, context: CallbackContext) -> int:
    """–û–±—É—á–∞–ª—Å—è –ª–∏ —Ä–∞–Ω–µ–µ"""
    user = update.message.from_user
    answer = update.message.text.lower()
    user_data[user.id]["studied_before"] = answer
    
    if answer == "–¥–∞":
        await update.message.reply_text(
            "–ù–∞ –∫–∞–∫–æ–π —Å—Ç—É–ø–µ–Ω–∏ –í—ã –æ–±—É—á–∞–ª–∏—Å—å?\n"
            "(–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–ø–µ–Ω–µ–π, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä')",
            reply_markup=levels_keyboard
        )
        return STUDIED_LEVELS
    else:
        await update.message.reply_text(
            "8. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ?",
            reply_markup=yes_no_keyboard
        )
        return PLAN_STUDY

async def studied_levels(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—É–ø–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user = update.message.from_user
    text = update.message.text
    
    if "studied_levels" not in user_data[user.id]:
        user_data[user.id]["studied_levels"] = []
    
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        if not user_data[user.id]["studied_levels"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—É–ø–µ–Ω—å.",
                reply_markup=levels_keyboard
            )
            return STUDIED_LEVELS
        
        await update.message.reply_text(
            "7. –ö –∫–∞–∫–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ø–∞—Å—Ç—å?",
            reply_markup=ReplyKeyboardRemove()
        )
        return DESIRED_TRAINER
    else:
        if text not in user_data[user.id]["studied_levels"]:
            user_data[user.id]["studied_levels"].append(text)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—É–ø–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
            reply_markup=levels_keyboard
        )
        return STUDIED_LEVELS

async def desired_trainer(update: Update, context: CallbackContext) -> int:
    """–ñ–µ–ª–∞–µ–º—ã–π —Ç—Ä–µ–Ω–µ—Ä"""
    user = update.message.from_user
    user_data[user.id]["desired_trainer"] = update.message.text
    
    await update.message.reply_text(
        "üîπ –ë–ª–æ–∫ 3. –û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º\n\n"
        "11. –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º?",
        reply_markup=yes_no_keyboard
    )
    return SPECIALIZATIONS_NOW

async def plan_study(update: Update, context: CallbackContext) -> int:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ª–∏ –æ–±—É—á–µ–Ω–∏–µ"""
    user = update.message.from_user
    answer = update.message.text.lower()
    user_data[user.id]["plan_study"] = answer
    
    if answer == "–¥–∞":
        await update.message.reply_text(
            "9. –ö–∞–∫—É—é —Å—Ç—É–ø–µ–Ω—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å?",
            reply_markup=levels_keyboard
        )
        return PLANNED_LEVEL
    else:
        await update.message.reply_text(
            "üîπ –ë–ª–æ–∫ 3. –û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º\n\n"
            "11. –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º?",
            reply_markup=yes_no_keyboard
        )
        return SPECIALIZATIONS_NOW

async def planned_level(update: Update, context: CallbackContext) -> int:
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—Ç—É–ø–µ–Ω—å"""
    user = update.message.from_user
    user_data[user.id]["planned_level"] = update.message.text
    
    await update.message.reply_text(
        "10. –ö –∫–∞–∫–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ø–∞—Å—Ç—å?",
        reply_markup=ReplyKeyboardRemove()
    )
    return PLANNED_TRAINER

async def planned_trainer(update: Update, context: CallbackContext) -> int:
    """–ñ–µ–ª–∞–µ–º—ã–π —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    user = update.message.from_user
    user_data[user.id]["planned_trainer"] = update.message.text
    
    await update.message.reply_text(
        "üîπ –ë–ª–æ–∫ 3. –û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º\n\n"
        "11. –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º?",
        reply_markup=yes_no_keyboard
    )
    return SPECIALIZATIONS_NOW

async def specializations_now(update: Update, context: CallbackContext) -> int:
    """–û–±—É—á–∞–µ—Ç—Å—è –ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º —Å–µ–π—á–∞—Å"""
    user = update.message.from_user
    answer = update.message.text.lower()
    user_data[user.id]["specializations_now"] = answer
    
    if answer == "–¥–∞":
        await update.message.reply_text(
            "12. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é(–∏):\n"
            "(–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, –∑–∞—Ç–µ–º '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä')",
            reply_markup=spec_keyboard
        )
        return SPEC_LIST_NOW
    else:
        await update.message.reply_text(
            "14. –ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–∏ –í—ã —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ?",
            reply_markup=yes_no_keyboard
        )
        return SPECIALIZATIONS_BEFORE

async def spec_list_now(update: Update, context: CallbackContext) -> int:
    """–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    user = update.message.from_user
    text = update.message.text
    
    if "spec_list_now" not in user_data[user.id]:
        user_data[user.id]["spec_list_now"] = []
    
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        if not user_data[user.id]["spec_list_now"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.",
                reply_markup=spec_keyboard
            )
            return SPEC_LIST_NOW
        
        await update.message.reply_text(BLOCKS["spec_trainer_now"], reply_markup=ReplyKeyboardRemove())
        return SPEC_TRAINER_NOW
    else:
        if text not in user_data[user.id]["spec_list_now"]:
            user_data[user.id]["spec_list_now"].append(text)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
                                      reply_markup=spec_keyboard)
        return SPEC_LIST_NOW

async def spec_trainer_now(update: Update, context: CallbackContext) -> int:
    """–¢—Ä–µ–Ω–µ—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user = update.message.from_user
    user_data[user.id]["spec_trainer_now"] = update.message.text
    await update.message.reply_text(BLOCKS["events"], reply_markup=events_keyboard)
    return EVENTS

async def specializations_before(update: Update, context: CallbackContext) -> int:
    """–û–±—É—á–∞–ª—Å—è –ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º —Ä–∞–Ω–µ–µ"""
    user = update.message.from_user
    answer = update.message.text.lower()
    user_data[user.id]["specializations_before"] = answer
    
    if answer == "–¥–∞":
        await update.message.reply_text(BLOCKS["spec_list_before"], reply_markup=spec_keyboard)
        return SPEC_LIST_BEFORE
    else:
        await update.message.reply_text(BLOCKS["events"], reply_markup=events_keyboard)
        return EVENTS

async def spec_list_before(update: Update, context: CallbackContext) -> int:
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    user = update.message.from_user
    text = update.message.text
    
    if "spec_list_before" not in user_data[user.id]:
        user_data[user.id]["spec_list_before"] = []
    
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        if not user_data[user.id]["spec_list_before"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.",
                                          reply_markup=spec_keyboard)
            return SPEC_LIST_BEFORE
        
        await update.message.reply_text(BLOCKS["spec_trainer_before"], reply_markup=ReplyKeyboardRemove())
        return SPEC_TRAINER_BEFORE
    else:
        if text not in user_data[user.id]["spec_list_before"]:
            user_data[user.id]["spec_list_before"].append(text)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
                                      reply_markup=spec_keyboard)
        return SPEC_LIST_BEFORE

async def spec_trainer_before(update: Update, context: CallbackContext) -> int:
    """–¢—Ä–µ–Ω–µ—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–Ω–µ–µ"""
    user = update.message.from_user
    user_data[user.id]["spec_trainer_before"] = update.message.text
    await update.message.reply_text(BLOCKS["events"], reply_markup=events_keyboard)
    return EVENTS

async def events(update: Update, context: CallbackContext) -> int:
    """–£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    user = update.message.from_user
    text = update.message.text
    
    if "events" not in user_data[user.id]:
        user_data[user.id]["events"] = []
    
    if text == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text(BLOCKS["events_other"], reply_markup=ReplyKeyboardRemove())
        return EVENTS_OTHER
    elif text == "–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª":
        user_data[user.id]["events"] = ["–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"]
        await update.message.reply_text(BLOCKS["feedback"], reply_markup=ReplyKeyboardRemove())
        return FEEDBACK
    else:
        user_data[user.id]["events"].append(text)
        await update.message.reply_text(BLOCKS["next_event"], reply_markup=events_keyboard)
        return EVENTS

async def events_other(update: Update, context: CallbackContext) -> int:
    """–î—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    user = update.message.from_user
    user_data[user.id]["events"].append(f"–î—Ä—É–≥–æ–µ: {update.message.text}")
    await update.message.reply_text(BLOCKS["feedback"], reply_markup=ReplyKeyboardRemove())
    return FEEDBACK

async def feedback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"""
    user = update.message.from_user
    user_data[user.id]["feedback"] = update.message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    privacy_keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n\n"
        "–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞, "
        "–¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å "
        "–ó–∞–∫–æ–Ω–æ–º –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å –æ—Ç 7 –º–∞—è 2021 –≥–æ–¥–∞ ‚Ññ 99-–ó ¬´–û –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª.\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://phenomeny.by/privacy_policy",
        reply_markup=privacy_keyboard
    )
    return PRIVACY_POLICY

async def privacy_policy(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    user = update.message.from_user
    choice = update.message.text
    
    if choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        user_data[user.id]["privacy_policy_consent"] = True
    else:
        user_data[user.id]["privacy_policy_consent"] = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)", "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞) –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ –∏ SMS, "
        "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É—á–∞—Å—Ç–∏–µ–º –≤ –æ–±—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å–∞—Ö.",
        reply_markup=notification_keyboard
    )
    return NOTIFICATION_CONSENT

async def notification_consent(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = update.message.from_user
    choice = update.message.text
    
    if choice == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)":
        user_data[user.id]["notification_consent"] = True
    else:
        user_data[user.id]["notification_consent"] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    filename = f"data/SurveyResults_{datetime.now().strftime('%Y%m')}.xlsx"
    if save_to_excel(user_data[user.id], filename):
        await update.message.reply_text(RESPONSES["survey_success"], reply_markup=main_menu_keyboard)
    else:
        await update.message.reply_text(RESPONSES["survey_error"], reply_markup=main_menu_keyboard)
    
    return MAIN_MENU

async def review_course(update: Update, context: CallbackContext) -> int:
    """–ö–∞–∫–æ–π –∫—É—Ä—Å –ø—Ä–æ—Ö–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user = update.message.from_user
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–∑—ã–≤–∞, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if "review" not in user_data[user.id]:
        user_data[user.id]["review"] = {
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "telegram_id": user.id,
            "telegram_username": user.username
        }
    
    user_data[user.id]["review"]["course"] = update.message.text
    
    await update.message.reply_text(
        "2. –ö—Ç–æ –±—ã–ª –≤–∞—à–∏–º —Ç—Ä–µ–Ω–µ—Ä–æ–º?",
        reply_markup=ReplyKeyboardRemove()
    )
    return REVIEW_TRAINER

async def review_trainer(update: Update, context: CallbackContext) -> int:
    """–¢—Ä–µ–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_data[user.id]["review"]["trainer"] = update.message.text
    
    await update.message.reply_text(
        "3. –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–¥—Ö–æ–¥ (–ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10):",
        reply_markup=rating_keyboard
    )
    return REVIEW_RATING

async def review_rating(update: Update, context: CallbackContext) -> int:
    """–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    rating = update.message.text
    
    if not rating.isdigit() or int(rating) < 1 or int(rating) > 10:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:",
            reply_markup=rating_keyboard
        )
        return REVIEW_RATING
    
    user_data[user.id]["review"]["rating"] = int(rating)
    
    await update.message.reply_text(
        "4. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç –∫—É—Ä—Å–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return REVIEW_RESULTS

async def review_results(update: Update, context: CallbackContext) -> int:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∫—É—Ä—Å–∞"""
    user = update.message.from_user
    user_data[user.id]["review"]["results"] = update.message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç–∑—ã–≤–∞
    publication_keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)", "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞) –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å–∞–π—Ç–µ https://phenomeny.by/",
        reply_markup=publication_keyboard
    )
    return REVIEW_PUBLICATION_CONSENT

async def review_publication_consent(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç–∑—ã–≤–∞"""
    user = update.message.from_user
    choice = update.message.text
    
    if choice == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)":
        user_data[user.id]["review"]["publication_consent"] = True
    else:
        user_data[user.id]["review"]["publication_consent"] = False
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    filename = f"data/Reviews_{datetime.now().strftime('%Y%m')}.xlsx"
    if save_to_excel(user_data[user.id]["review"], filename):
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!",
            reply_markup=main_menu_keyboard
        )
    else:
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í–æ–∑–Ω–∏–∫–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º. "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=main_menu_keyboard
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
    if "review" in user_data[user.id]:
        del user_data[user.id]["review"]
    
    return MAIN_MENU

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user = update.message.from_user
    logger.info(f"User {user.id} canceled the conversation.")
    
    await update.message.reply_text(
        RESPONSES["cancel"],
        reply_markup=main_menu_keyboard
    )
    
    if user.id in user_data:
        del user_data[user.id]
    
    return MAIN_MENU

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–∞
    survey_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å$"), main_menu)],
    states={
        SURVEY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_name)],
        SURVEY_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_email)],
        SURVEY_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_phone)],
        MAIN_PROGRAM_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_program_now)],
        CURRENT_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, current_level)],
        CURRENT_TRAINER: [MessageHandler(filters.TEXT & ~filters.COMMAND, current_trainer)],
        STUDIED_BEFORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, studied_before)],
        STUDIED_LEVELS: [MessageHandler(filters.TEXT & ~filters.COMMAND, studied_levels)],
        DESIRED_TRAINER: [MessageHandler(filters.TEXT & ~filters.COMMAND, desired_trainer)],
        PLAN_STUDY: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_study)],
        PLANNED_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, planned_level)],
        PLANNED_TRAINER: [MessageHandler(filters.TEXT & ~filters.COMMAND, planned_trainer)],
        SPECIALIZATIONS_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, specializations_now)],
        SPEC_LIST_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, spec_list_now)],
        SPEC_TRAINER_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, spec_trainer_now)],
        SPECIALIZATIONS_BEFORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, specializations_before)],
        SPEC_LIST_BEFORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, spec_list_before)],
        SPEC_TRAINER_BEFORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, spec_trainer_before)],
        EVENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, events)],
        EVENTS_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, events_other)],
        FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback)],
        PRIVACY_POLICY: [MessageHandler(filters.TEXT & ~filters.COMMAND, privacy_policy)],
        NOTIFICATION_CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, notification_consent)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    map_to_parent={MAIN_MENU: MAIN_MENU}
)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
    review_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), main_menu)],
    states={
        REVIEW_COURSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_course)],
        REVIEW_TRAINER: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_trainer)],
        REVIEW_RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_rating)],
        REVIEW_RESULTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_results)],
        REVIEW_PUBLICATION_CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_publication_consent)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    map_to_parent={MAIN_MENU: MAIN_MENU}
)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(survey_conv)
    application.add_handler(review_conv)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()